{"ast":null,"code":"var _jsxFileName = \"/Users/eileenwang/Documents/JS/Practice/simplr/imgview/src/util/ErrorBoundary.tsx\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ErrorBoundary extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      error: null,\n      errorInfo: null\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    }); // You can also log the error to an error reporting service\n  }\n\n  render() {\n    //if(this.state.hasError) {\n    if (this.state.errorInfo) {\n      // Error path\n      // The <details> tag is often used to create an interactive widget that the user can open and close. \n      //By default, the widget is closed. When open, it expands, and displays the content within.\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Something went wrong.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"details\", {\n          style: {\n            whiteSpace: 'pre-wrap'\n          },\n          children: [this.state.error && this.state.error.toString(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this), this.state.errorInfo && this.state.errorInfo.componentStack]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this);\n    } // Normally, just render children\n\n\n    return this.props.children;\n  }\n\n}","map":{"version":3,"sources":["/Users/eileenwang/Documents/JS/Practice/simplr/imgview/src/util/ErrorBoundary.tsx"],"names":["React","Component","ErrorBoundary","state","error","errorInfo","componentDidCatch","setState","render","whiteSpace","toString","componentStack","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAuD,OAAvD;;AAWA,eAAe,MAAMC,aAAN,SAA4BD,SAA5B,CAAoD;AAAA;AAAA;AAAA,SACxDE,KADwD,GACzC;AACpBC,MAAAA,KAAK,EAAE,IADa;AAEpBC,MAAAA,SAAS,EAAE;AAFS,KADyC;AAAA;;AAMxDC,EAAAA,iBAAiB,CAACF,KAAD,EAAeC,SAAf,EAAqC;AAC3D;AACA,SAAKE,QAAL,CAAc;AACZH,MAAAA,KAAK,EAAEA,KADK;AAEZC,MAAAA,SAAS,EAAEA;AAFC,KAAd,EAF2D,CAM3D;AAED;;AAEDG,EAAAA,MAAM,GAAG;AACT;AACE,QAAI,KAAKL,KAAL,CAAWE,SAAf,EAA0B;AACxB;AACA;AACA;AACA,0BACE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAS,UAAA,KAAK,EAAE;AAAEI,YAAAA,UAAU,EAAE;AAAd,WAAhB;AAAA,qBACG,KAAKN,KAAL,CAAWC,KAAX,IAAoB,KAAKD,KAAL,CAAWC,KAAX,CAAiBM,QAAjB,EADvB,eAEE;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGG,KAAKP,KAAL,CAAWE,SAAX,IAAwB,KAAKF,KAAL,CAAWE,SAAX,CAAqBM,cAHhD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAUD,KAhBM,CAiBP;;;AACA,WAAO,KAAKC,KAAL,CAAWC,QAAlB;AACD;;AAnC8D","sourcesContent":["import React, { Component, ErrorInfo, ReactNode } from \"react\";\n\ninterface Props {\n  children?: ReactNode;\n}\n\ninterface State {\n  error: Error|null;\n  errorInfo: ErrorInfo|null;\n}\n\nexport default class ErrorBoundary extends Component<Props, State> {\n    public state: State = {\n      error: null,\n      errorInfo: null\n    };\n\n    public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n      // Catch errors in any components below and re-render with error message\n      this.setState({\n        error: error,\n        errorInfo: errorInfo\n      })\n      // You can also log the error to an error reporting service\n    \n    }\n    \n    render() {\n    //if(this.state.hasError) {\n      if (this.state.errorInfo) {\n        // Error path\n        // The <details> tag is often used to create an interactive widget that the user can open and close. \n        //By default, the widget is closed. When open, it expands, and displays the content within.\n        return (\n          <div>\n            <h2>Something went wrong.</h2>\n            <details style={{ whiteSpace: 'pre-wrap' }}>\n              {this.state.error && this.state.error.toString()}\n              <br />\n              {this.state.errorInfo && this.state.errorInfo.componentStack}\n            </details>\n          </div>\n        );\n      }\n      // Normally, just render children\n      return this.props.children;\n    }  \n  }\n  \n\n  "]},"metadata":{},"sourceType":"module"}