{"ast":null,"code":"var _jsxFileName = \"/Users/eileenwang/Documents/JS/Practice/simplr/imgview/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport React from 'react'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport { getBlocks } from './blocks';\nimport { Header } from './components/Header/Header';\nimport { ImageGrid } from './components/ImageGrid/ImageGrid';\nimport { InfoPanel } from './components/InfoPanel/InfoPanel';\nimport ErrorBoundary from './util/ErrorBoundary';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n\n  var _info$data, _info$data2, _info$data3, _info$data4;\n\n  const [blocks, setBlocks] = React.useState(null);\n  const [info, setInfo] = React.useState(undefined);\n  let imgarr = []; //Load the blocks \n\n  React.useEffect(() => {\n    let abortController = new AbortController();\n    let aborted = abortController.signal.aborted;\n\n    (async () => {\n      const resp = await getBlocks();\n      aborted = abortController.signal.aborted;\n\n      if (aborted === false) {\n        setBlocks(resp);\n      }\n    })();\n\n    return () => abortController.abort();\n  }, []); //Iterate the blocks and put the blocks of type Image into an array and return the array\n\n  function SelectImg(rootblock) {\n    if (rootblock) {\n      if ((rootblock === null || rootblock === void 0 ? void 0 : rootblock.type) === 'Image') imgarr.push(rootblock);else if ((rootblock === null || rootblock === void 0 ? void 0 : rootblock.type) === 'Column' && rootblock !== null && rootblock !== void 0 && rootblock.children) rootblock === null || rootblock === void 0 ? void 0 : rootblock.children.map(el => {\n        if (el.type === 'Image') {\n          imgarr.push(el);\n        } else if (el.type === 'Column' && el.children) SelectImg(el);\n\n        return imgarr;\n      });\n    }\n\n    return imgarr;\n  }\n\n  if (blocks) SelectImg(blocks);\n\n  function onClick(img) {\n    setInfo(img); //console.log('imgid:',img.id);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flexGrow: 1,\n          mr: 60,\n          p: 2\n        },\n        children: !blocks ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Loading...wait for the response\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: {\n              xs: 3,\n              md: 3\n            },\n            columns: {\n              xs: 4,\n              sm: 8,\n              md: 12\n            },\n            children: /*#__PURE__*/_jsxDEV(Routes, {\n              children: [/*#__PURE__*/_jsxDEV(Route, {\n                path: \"/:imgid\",\n                element: imgarr ? imgarr.map((img, index) => /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 2,\n                  sm: 4,\n                  md: 4,\n                  children: /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n                    children: /*#__PURE__*/_jsxDEV(ImageGrid, {\n                      data: img,\n                      info: info,\n                      onClick: () => onClick(img)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 76,\n                      columnNumber: 38\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 76,\n                    columnNumber: 23\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 19\n                }, this)) : /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: \"No image\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 20\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"*\",\n                element: imgarr ? imgarr.map((img, index) => /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 2,\n                  sm: 4,\n                  md: 4,\n                  children: /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n                    children: /*#__PURE__*/_jsxDEV(ImageGrid, {\n                      data: img,\n                      info: info,\n                      onClick: () => onClick(img)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 85,\n                      columnNumber: 38\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 23\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 19\n                }, this)) : /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: \"No image\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 12\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 12\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoPanel, {\n        id: info === null || info === void 0 ? void 0 : info.id,\n        description: info === null || info === void 0 ? void 0 : (_info$data = info.data) === null || _info$data === void 0 ? void 0 : _info$data.description.toString(),\n        dimensions: (info === null || info === void 0 ? void 0 : (_info$data2 = info.data) === null || _info$data2 === void 0 ? void 0 : _info$data2.width.toString()) + \" x \" + (info === null || info === void 0 ? void 0 : (_info$data3 = info.data) === null || _info$data3 === void 0 ? void 0 : _info$data3.height.toString()),\n        createdAt: info === null || info === void 0 ? void 0 : (_info$data4 = info.data) === null || _info$data4 === void 0 ? void 0 : _info$data4.createdAt.toString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"/aq2OQvCNViaIfqRZPhcEoovoOM=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/eileenwang/Documents/JS/Practice/simplr/imgview/src/App.tsx"],"names":["BrowserRouter","Router","Route","Routes","React","getBlocks","Header","ImageGrid","InfoPanel","ErrorBoundary","Box","Grid","App","blocks","setBlocks","useState","info","setInfo","undefined","imgarr","useEffect","abortController","AbortController","aborted","signal","resp","abort","SelectImg","rootblock","type","push","children","map","el","onClick","img","flexGrow","mr","p","xs","md","sm","index","id","data","description","toString","width","height","createdAt"],"mappings":"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","sourcesContent":["import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport React from 'react';\n\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { Block,getBlocks } from './blocks';\n\nimport { Header } from './components/Header/Header';\nimport { ImageGrid } from './components/ImageGrid/ImageGrid';\nimport { InfoPanel } from './components/InfoPanel/InfoPanel';\nimport ErrorBoundary from './util/ErrorBoundary'\n\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\n\nexport const App = () => {\n  const [blocks, setBlocks] = React.useState<Block | null>(null);\n  const [info, setInfo] = React.useState<Block|undefined>(undefined);\n  \n  let imgarr:Block[] = [];\n \n  //Load the blocks \n  React.useEffect(()=>{\n    let abortController: AbortController = new AbortController();\n    let aborted = abortController.signal.aborted;\n\n    (async ()=>{\n      const resp = await getBlocks();\n      aborted = abortController.signal.aborted;\n      if (aborted === false) {\n        setBlocks(resp);\n      }\n    })();\n\n    return () => abortController.abort();\n  },[])\n \n  //Iterate the blocks and put the blocks of type Image into an array and return the array\n  function SelectImg(rootblock:Block|null): Block[]{\n    if(rootblock){\n      if(rootblock?.type==='Image') imgarr.push(rootblock);      \n      else if(rootblock?.type==='Column'&&rootblock?.children) \n        rootblock?.children.map((el)=> {\n          if(el.type==='Image') {\n            imgarr.push(el);\n          }\n          else if(el.type==='Column'&& el.children) SelectImg(el);\n          return imgarr;\n        })\n    }\n    return imgarr;\n  }\n  \n  if(blocks) SelectImg(blocks);\n\n  \n\n  function onClick(img:Block): void{\n    setInfo(img);\n    //console.log('imgid:',img.id);\n   }\n  \n  return (\n    <Router>\n      <Header />\n      <main>\n        <Box sx={{ flexGrow: 1, mr:60,p:2}}>\n        {!blocks? <div><h1>Loading...wait for the response</h1></div>:\n        <ErrorBoundary>\n          <Grid container spacing={{ xs: 3, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n           <Routes>                 \n            <Route  path=\"/:imgid\"  element= {\n                imgarr ?\n                 imgarr.map((img,index)=>\n                  <Grid item xs={2} sm={4} md={4} key={index} >\n                      <ErrorBoundary><ImageGrid data={img} info={info} onClick={()=>onClick(img)}/></ErrorBoundary>\n                  </Grid>\n                  )\n                  :<Grid item>No image</Grid>\n            } /> \n           <Route  path=\"*\"  element= {\n                imgarr ?\n                 imgarr.map((img,index)=>\n                  <Grid item xs={2} sm={4} md={4} key={index} >\n                      <ErrorBoundary><ImageGrid data={img} info={info} onClick={()=>onClick(img)}/></ErrorBoundary>\n                  </Grid>\n                  ):<Grid item>No image</Grid>\n            } /> \n            </Routes>\n          </Grid>\n          </ErrorBoundary>\n          }\n        </Box>\n        <InfoPanel id={info?.id} description={info?.data?.description.toString()} dimensions={info?.data?.width.toString()+\" x \"+info?.data?.height.toString()} createdAt={info?.data?.createdAt.toString()}/>\n      </main>\n    </Router>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}