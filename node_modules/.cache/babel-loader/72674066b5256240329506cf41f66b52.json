{"ast":null,"code":"var _jsxFileName = \"/Users/eileenwang/Documents/JS/Practice/simplr/imgview/src/components/ImageGrid/ImageGrid.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styles from './ImageGrid.module.css';\nimport { getBlocks } from '../../blocks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ImageGrid = () => {\n  _s();\n\n  const [blocks, setBlocks] = React.useState(null); // const [info, setInfo] = React.useState<Block|undefined>(undefined);\n\n  let imgarr = []; //Load the blocks \n\n  React.useEffect(() => {\n    let abortController = new AbortController();\n    let aborted = abortController.signal.aborted;\n\n    (async () => {\n      const resp = await getBlocks();\n      aborted = abortController.signal.aborted;\n\n      if (aborted === false) {\n        setBlocks(resp);\n      }\n    })();\n\n    return () => abortController.abort();\n  }, []); //Iterate the blocks and put the blocks of type Image into an array and return the array\n\n  function SelectImg(rootblock) {\n    if (rootblock) {\n      if ((rootblock === null || rootblock === void 0 ? void 0 : rootblock.type) === 'Image') imgarr.push(rootblock);else if ((rootblock === null || rootblock === void 0 ? void 0 : rootblock.type) === 'Column' && rootblock !== null && rootblock !== void 0 && rootblock.children) rootblock === null || rootblock === void 0 ? void 0 : rootblock.children.map(el => {\n        if (el.type === 'Image') {\n          imgarr.push(el);\n        } else if (el.type === 'Column' && el.children) SelectImg(el);\n\n        return imgarr;\n      });\n    }\n\n    return imgarr;\n  }\n\n  if (blocks) SelectImg(blocks);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ImageGrid, \"rIMWF6nvXGTEtg9+OamPER3DO/M=\");\n\n_c = ImageGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageGrid\");","map":{"version":3,"sources":["/Users/eileenwang/Documents/JS/Practice/simplr/imgview/src/components/ImageGrid/ImageGrid.tsx"],"names":["React","styles","getBlocks","ImageGrid","blocks","setBlocks","useState","imgarr","useEffect","abortController","AbortController","aborted","signal","resp","abort","SelectImg","rootblock","type","push","children","map","el","container"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAAeC,SAAf,QAAgC,cAAhC;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAE3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,KAAK,CAACM,QAAN,CAA6B,IAA7B,CAA5B,CAF2B,CAG3B;;AAEA,MAAIC,MAAc,GAAG,EAArB,CAL2B,CAO7B;;AACAP,EAAAA,KAAK,CAACQ,SAAN,CAAgB,MAAI;AAClB,QAAIC,eAAgC,GAAG,IAAIC,eAAJ,EAAvC;AACA,QAAIC,OAAO,GAAGF,eAAe,CAACG,MAAhB,CAAuBD,OAArC;;AAEA,KAAC,YAAU;AACT,YAAME,IAAI,GAAG,MAAMX,SAAS,EAA5B;AACAS,MAAAA,OAAO,GAAGF,eAAe,CAACG,MAAhB,CAAuBD,OAAjC;;AACA,UAAIA,OAAO,KAAK,KAAhB,EAAuB;AACrBN,QAAAA,SAAS,CAACQ,IAAD,CAAT;AACD;AACF,KAND;;AAQA,WAAO,MAAMJ,eAAe,CAACK,KAAhB,EAAb;AACD,GAbD,EAaE,EAbF,EAR6B,CAuB7B;;AACA,WAASC,SAAT,CAAmBC,SAAnB,EAAiD;AAC/C,QAAGA,SAAH,EAAa;AACX,UAAG,CAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,IAAX,MAAkB,OAArB,EAA8BV,MAAM,CAACW,IAAP,CAAYF,SAAZ,EAA9B,KACK,IAAG,CAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,IAAX,MAAkB,QAAlB,IAA4BD,SAA5B,aAA4BA,SAA5B,eAA4BA,SAAS,CAAEG,QAA1C,EACHH,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEG,QAAX,CAAoBC,GAApB,CAAyBC,EAAD,IAAO;AAC7B,YAAGA,EAAE,CAACJ,IAAH,KAAU,OAAb,EAAsB;AACpBV,UAAAA,MAAM,CAACW,IAAP,CAAYG,EAAZ;AACD,SAFD,MAGK,IAAGA,EAAE,CAACJ,IAAH,KAAU,QAAV,IAAqBI,EAAE,CAACF,QAA3B,EAAqCJ,SAAS,CAACM,EAAD,CAAT;;AAC1C,eAAOd,MAAP;AACD,OAND;AAOH;;AACD,WAAOA,MAAP;AACD;;AAED,MAAGH,MAAH,EAAWW,SAAS,CAACX,MAAD,CAAT;AAET,sBACI;AAAK,IAAA,SAAS,EAAEH,MAAM,CAACqB,SAAvB;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAtDM;;GAAMnB,S;;KAAAA,S","sourcesContent":["import React from 'react';\n\nimport styles from './ImageGrid.module.css';\nimport { Block,getBlocks } from '../../blocks';\n\nexport const ImageGrid = () => {\n\n    const [blocks, setBlocks] = React.useState<Block | null>(null);\n    // const [info, setInfo] = React.useState<Block|undefined>(undefined);\n  \n    let imgarr:Block[] = [];\n \n  //Load the blocks \n  React.useEffect(()=>{\n    let abortController: AbortController = new AbortController();\n    let aborted = abortController.signal.aborted;\n\n    (async ()=>{\n      const resp = await getBlocks();\n      aborted = abortController.signal.aborted;\n      if (aborted === false) {\n        setBlocks(resp);\n      }\n    })();\n\n    return () => abortController.abort();\n  },[])\n \n  //Iterate the blocks and put the blocks of type Image into an array and return the array\n  function SelectImg(rootblock:Block|null): Block[]{\n    if(rootblock){\n      if(rootblock?.type==='Image') imgarr.push(rootblock);      \n      else if(rootblock?.type==='Column'&&rootblock?.children) \n        rootblock?.children.map((el)=> {\n          if(el.type==='Image') {\n            imgarr.push(el);\n          }\n          else if(el.type==='Column'&& el.children) SelectImg(el);\n          return imgarr;\n        })\n    }\n    return imgarr;\n  }\n  \n  if(blocks) SelectImg(blocks);\n\n    return(\n        <div className={styles.container}>\n            <div>1</div>\n            <div>2</div>\n            <div>3</div>\n            <div>4</div>\n            <div>5</div>\n            <div>6</div>\n            <div>7</div>\n            <div>8</div>\n            <div>9</div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}