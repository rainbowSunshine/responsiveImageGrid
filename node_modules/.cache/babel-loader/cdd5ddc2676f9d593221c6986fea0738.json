{"ast":null,"code":"var _jsxFileName = \"/Users/eileenwang/Documents/JS/Practice/simplr/imgview/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport React from 'react'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport { getBlocks } from './blocks';\nimport { Header } from './components/Header/Header';\nimport { ImageGrid } from './components/ImageGrid/ImageGrid';\nimport { InfoPanel } from './components/InfoPanel/InfoPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n\n  var _info$data, _info$data2, _info$data3, _info$data4;\n\n  const [blocks, setBlocks] = React.useState(undefined);\n  const [info, setInfo] = React.useState(undefined); //Load the blocks \n\n  React.useEffect(() => {\n    let abortController = new AbortController();\n    let aborted = abortController.signal.aborted;\n\n    (async () => {\n      const resp = await getBlocks();\n      aborted = abortController.signal.aborted;\n\n      if (aborted === false) {\n        setBlocks(resp);\n      }\n    })();\n\n    return () => abortController.abort();\n  }, []); // function handleClick(event: React.MouseEvent<HTMLElement>): void{\n  //   // setInfo(img);\n  //   console.log('handleClick:',event);\n  //  }\n\n  function handleClick(img) {\n    setInfo(img);\n    console.log('handleClick:', img);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!blocks ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Loading...wait for the response\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(ImageGrid, {\n        blocks: blocks,\n        onClick: handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoPanel, {\n        id: info === null || info === void 0 ? void 0 : info.id,\n        description: info === null || info === void 0 ? void 0 : (_info$data = info.data) === null || _info$data === void 0 ? void 0 : _info$data.description.toString(),\n        dimensions: (info === null || info === void 0 ? void 0 : (_info$data2 = info.data) === null || _info$data2 === void 0 ? void 0 : _info$data2.width.toString()) + \" x \" + (info === null || info === void 0 ? void 0 : (_info$data3 = info.data) === null || _info$data3 === void 0 ? void 0 : _info$data3.height.toString()),\n        createdAt: info === null || info === void 0 ? void 0 : (_info$data4 = info.data) === null || _info$data4 === void 0 ? void 0 : _info$data4.createdAt.toString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this) // <Router>\n  //   <Header />\n  //   <main>\n  //     <Box sx={{ flexGrow: 1, mr:60,p:2}}>\n  //     {!blocks? <div><h1>Loading...wait for the response</h1></div>:\n  //     <ErrorBoundary>\n  //       <Grid container spacing={{ xs: 3, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n  //        <Routes>                 \n  //         <Route  path=\"/:imgid\"  element= {\n  //             imgarr ?\n  //              imgarr.map((img,index)=>\n  //               <Grid item xs={2} sm={4} md={4} key={index} >\n  //                   <ErrorBoundary><ImageGridO data={img} info={info} onClick={()=>onClick(img)}/></ErrorBoundary>\n  //               </Grid>\n  //               )\n  //               :<Grid item>No image</Grid>\n  //         } /> \n  //        <Route  path=\"*\"  element= {\n  //             imgarr ?\n  //              imgarr.map((img,index)=>\n  //               <Grid item xs={2} sm={4} md={4} key={index} >\n  //                   <ErrorBoundary><ImageGridO data={img} info={info} onClick={()=>onClick(img)}/></ErrorBoundary>\n  //               </Grid>\n  //               ):<Grid item>No image</Grid>\n  //         } /> \n  //         </Routes>\n  //       </Grid>\n  //       </ErrorBoundary>\n  //       }\n  //     </Box>\n  //     <InfoPanel id={info?.id} description={info?.data?.description.toString()} dimensions={info?.data?.width.toString()+\" x \"+info?.data?.height.toString()} createdAt={info?.data?.createdAt.toString()}/>\n  //   </main>\n  // </Router>\n  ;\n};\n\n_s(App, \"WaKPvQAe545DNIsHCuRYONTMl7I=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/eileenwang/Documents/JS/Practice/simplr/imgview/src/App.tsx"],"names":["BrowserRouter","Router","React","getBlocks","Header","ImageGrid","InfoPanel","App","blocks","setBlocks","useState","undefined","info","setInfo","useEffect","abortController","AbortController","aborted","signal","resp","abort","handleClick","img","console","log","id","data","description","toString","width","height","createdAt"],"mappings":";;;AAAA,SAASA,aAAa,IAAIC,MAA1B,QAAuD,kBAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAGA;;AACA,SAAeC,SAAf,QAAgC,UAAhC;AAEA,SAASC,MAAT,QAAuB,4BAAvB;AACA,SAASC,SAAT,QAA0B,kCAA1B;AACA,SAASC,SAAT,QAA0B,kCAA1B;;AAGA,OAAO,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAAA;;AACvB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,KAAK,CAACQ,QAAN,CAAkCC,SAAlC,CAA5B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,KAAK,CAACQ,QAAN,CAAgCC,SAAhC,CAAxB,CAFuB,CAIvB;;AACAT,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAI;AAClB,QAAIC,eAAgC,GAAG,IAAIC,eAAJ,EAAvC;AACA,QAAIC,OAAO,GAAGF,eAAe,CAACG,MAAhB,CAAuBD,OAArC;;AAEA,KAAC,YAAU;AACT,YAAME,IAAI,GAAG,MAAMhB,SAAS,EAA5B;AACAc,MAAAA,OAAO,GAAGF,eAAe,CAACG,MAAhB,CAAuBD,OAAjC;;AACA,UAAIA,OAAO,KAAK,KAAhB,EAAuB;AACrBR,QAAAA,SAAS,CAACU,IAAD,CAAT;AACD;AACF,KAND;;AAQA,WAAO,MAAMJ,eAAe,CAACK,KAAhB,EAAb;AACD,GAbD,EAaE,EAbF,EALuB,CAoBvB;AACA;AACA;AACA;;AAEA,WAASC,WAAT,CAAqBC,GAArB,EAAsC;AACpCT,IAAAA,OAAO,CAACS,GAAD,CAAP;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BF,GAA3B;AACA;;AAEF,sBACE,QAAC,MAAD;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,iBACC,CAACd,MAAD,gBAAS;AAAA,+BAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAAT,gBACC,QAAC,SAAD;AAAW,QAAA,MAAM,EAAEA,MAAnB;AAA2B,QAAA,OAAO,EAAEa;AAApC;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE,QAAC,SAAD;AACE,QAAA,EAAE,EAAET,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEa,EADZ;AAEE,QAAA,WAAW,EAAEb,IAAF,aAAEA,IAAF,qCAAEA,IAAI,CAAEc,IAAR,+CAAE,WAAYC,WAAZ,CAAwBC,QAAxB,EAFf;AAGE,QAAA,UAAU,EAAE,CAAAhB,IAAI,SAAJ,IAAAA,IAAI,WAAJ,2BAAAA,IAAI,CAAEc,IAAN,4DAAYG,KAAZ,CAAkBD,QAAlB,MAA6B,KAA7B,IAAmChB,IAAnC,aAAmCA,IAAnC,sCAAmCA,IAAI,CAAEc,IAAzC,gDAAmC,YAAYI,MAAZ,CAAmBF,QAAnB,EAAnC,CAHd;AAIE,QAAA,SAAS,EAAEhB,IAAF,aAAEA,IAAF,sCAAEA,IAAI,CAAEc,IAAR,gDAAE,YAAYK,SAAZ,CAAsBH,QAAtB;AAJb;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CAeE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CF;AAiDD,CA/EM;;GAAMrB,G;;KAAAA,G","sourcesContent":["import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport React from 'react';\n\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { Block,getBlocks } from './blocks';\n\nimport { Header } from './components/Header/Header';\nimport { ImageGrid } from './components/ImageGrid/ImageGrid';\nimport { InfoPanel } from './components/InfoPanel/InfoPanel';\n\n\nexport const App = () => {\n  const [blocks, setBlocks] = React.useState<Block | undefined>(undefined);\n  const [info, setInfo] = React.useState<Block|undefined>(undefined);\n \n  //Load the blocks \n  React.useEffect(()=>{\n    let abortController: AbortController = new AbortController();\n    let aborted = abortController.signal.aborted;\n\n    (async ()=>{\n      const resp = await getBlocks();\n      aborted = abortController.signal.aborted;\n      if (aborted === false) {\n        setBlocks(resp);\n      }\n    })();\n\n    return () => abortController.abort();\n  },[])  \n\n  // function handleClick(event: React.MouseEvent<HTMLElement>): void{\n  //   // setInfo(img);\n  //   console.log('handleClick:',event);\n  //  }\n\n  function handleClick(img: Block): void{\n    setInfo(img);\n    console.log('handleClick:',img);\n   }\n  \n  return (\n    <Router>\n      <Header />\n      <main>\n      {!blocks? <div><h1>Loading...wait for the response</h1></div>:\n        <ImageGrid blocks={blocks} onClick={handleClick}/>\n      }\n        <InfoPanel \n          id={info?.id} \n          description={info?.data?.description.toString()} \n          dimensions={info?.data?.width.toString()+\" x \"+info?.data?.height.toString()} \n          createdAt={info?.data?.createdAt.toString()}\n          />\n      </main>\n    </Router>\n    // <Router>\n    //   <Header />\n    //   <main>\n    //     <Box sx={{ flexGrow: 1, mr:60,p:2}}>\n    //     {!blocks? <div><h1>Loading...wait for the response</h1></div>:\n    //     <ErrorBoundary>\n    //       <Grid container spacing={{ xs: 3, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n    //        <Routes>                 \n    //         <Route  path=\"/:imgid\"  element= {\n    //             imgarr ?\n    //              imgarr.map((img,index)=>\n    //               <Grid item xs={2} sm={4} md={4} key={index} >\n    //                   <ErrorBoundary><ImageGridO data={img} info={info} onClick={()=>onClick(img)}/></ErrorBoundary>\n    //               </Grid>\n    //               )\n    //               :<Grid item>No image</Grid>\n    //         } /> \n    //        <Route  path=\"*\"  element= {\n    //             imgarr ?\n    //              imgarr.map((img,index)=>\n    //               <Grid item xs={2} sm={4} md={4} key={index} >\n    //                   <ErrorBoundary><ImageGridO data={img} info={info} onClick={()=>onClick(img)}/></ErrorBoundary>\n    //               </Grid>\n    //               ):<Grid item>No image</Grid>\n    //         } /> \n    //         </Routes>\n    //       </Grid>\n    //       </ErrorBoundary>\n    //       }\n    //     </Box>\n    //     <InfoPanel id={info?.id} description={info?.data?.description.toString()} dimensions={info?.data?.width.toString()+\" x \"+info?.data?.height.toString()} createdAt={info?.data?.createdAt.toString()}/>\n    //   </main>\n    // </Router>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}