{"ast":null,"code":"var _jsxFileName = \"/Users/eileenwang/Documents/JS/Practice/simplr/imgview/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport React from 'react'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport { getBlocks } from './blocks';\nimport { Header } from './components/Header/Header';\nimport { ImageGrid } from './components/ImageGrid/ImageGrid';\nimport { InfoPanel } from './components/InfoPanel/InfoPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n\n  const [blocks, setBlocks] = React.useState(null);\n  const [info, setInfo] = React.useState(undefined);\n  let imgarr = []; //Load the blocks \n\n  React.useEffect(() => {\n    let abortController = new AbortController();\n    let aborted = abortController.signal.aborted;\n\n    (async () => {\n      const resp = await getBlocks();\n      aborted = abortController.signal.aborted;\n\n      if (aborted === false) {\n        setBlocks(resp);\n      }\n    })();\n\n    return () => abortController.abort();\n  }, []); //Iterate the blocks and put the blocks of type Image into an array and return the array\n\n  function SelectImg(rootblock) {\n    if (rootblock) {\n      if ((rootblock === null || rootblock === void 0 ? void 0 : rootblock.type) === 'Image') imgarr.push(rootblock);else if ((rootblock === null || rootblock === void 0 ? void 0 : rootblock.type) === 'Column' && rootblock !== null && rootblock !== void 0 && rootblock.children) rootblock === null || rootblock === void 0 ? void 0 : rootblock.children.map(el => {\n        if (el.type === 'Image') {\n          imgarr.push(el);\n        } else if (el.type === 'Column' && el.children) SelectImg(el);\n\n        return imgarr;\n      });\n    }\n\n    return imgarr;\n  }\n\n  if (blocks) SelectImg(blocks);\n\n  function onClick(img) {\n    setInfo(img); //console.log('imgid:',img.id);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(ImageGrid, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoPanel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this) // <Router>\n  //   <Header />\n  //   <main>\n  //     <Box sx={{ flexGrow: 1, mr:60,p:2}}>\n  //     {!blocks? <div><h1>Loading...wait for the response</h1></div>:\n  //     <ErrorBoundary>\n  //       <Grid container spacing={{ xs: 3, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n  //        <Routes>                 \n  //         <Route  path=\"/:imgid\"  element= {\n  //             imgarr ?\n  //              imgarr.map((img,index)=>\n  //               <Grid item xs={2} sm={4} md={4} key={index} >\n  //                   <ErrorBoundary><ImageGridO data={img} info={info} onClick={()=>onClick(img)}/></ErrorBoundary>\n  //               </Grid>\n  //               )\n  //               :<Grid item>No image</Grid>\n  //         } /> \n  //        <Route  path=\"*\"  element= {\n  //             imgarr ?\n  //              imgarr.map((img,index)=>\n  //               <Grid item xs={2} sm={4} md={4} key={index} >\n  //                   <ErrorBoundary><ImageGridO data={img} info={info} onClick={()=>onClick(img)}/></ErrorBoundary>\n  //               </Grid>\n  //               ):<Grid item>No image</Grid>\n  //         } /> \n  //         </Routes>\n  //       </Grid>\n  //       </ErrorBoundary>\n  //       }\n  //     </Box>\n  //     <InfoPanel id={info?.id} description={info?.data?.description.toString()} dimensions={info?.data?.width.toString()+\" x \"+info?.data?.height.toString()} createdAt={info?.data?.createdAt.toString()}/>\n  //   </main>\n  // </Router>\n  ;\n};\n\n_s(App, \"/aq2OQvCNViaIfqRZPhcEoovoOM=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/eileenwang/Documents/JS/Practice/simplr/imgview/src/App.tsx"],"names":["BrowserRouter","Router","React","getBlocks","Header","ImageGrid","InfoPanel","App","blocks","setBlocks","useState","info","setInfo","undefined","imgarr","useEffect","abortController","AbortController","aborted","signal","resp","abort","SelectImg","rootblock","type","push","children","map","el","onClick","img"],"mappings":";;;AAAA,SAASA,aAAa,IAAIC,MAA1B,QAAuD,kBAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAGA;;AACA,SAAeC,SAAf,QAAgC,UAAhC;AAEA,SAASC,MAAT,QAAuB,4BAAvB;AACA,SAASC,SAAT,QAA0B,kCAA1B;AACA,SAASC,SAAT,QAA0B,kCAA1B;;AAMA,OAAO,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,KAAK,CAACQ,QAAN,CAA6B,IAA7B,CAA5B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,KAAK,CAACQ,QAAN,CAAgCG,SAAhC,CAAxB;AAEA,MAAIC,MAAc,GAAG,EAArB,CAJuB,CAMvB;;AACAZ,EAAAA,KAAK,CAACa,SAAN,CAAgB,MAAI;AAClB,QAAIC,eAAgC,GAAG,IAAIC,eAAJ,EAAvC;AACA,QAAIC,OAAO,GAAGF,eAAe,CAACG,MAAhB,CAAuBD,OAArC;;AAEA,KAAC,YAAU;AACT,YAAME,IAAI,GAAG,MAAMjB,SAAS,EAA5B;AACAe,MAAAA,OAAO,GAAGF,eAAe,CAACG,MAAhB,CAAuBD,OAAjC;;AACA,UAAIA,OAAO,KAAK,KAAhB,EAAuB;AACrBT,QAAAA,SAAS,CAACW,IAAD,CAAT;AACD;AACF,KAND;;AAQA,WAAO,MAAMJ,eAAe,CAACK,KAAhB,EAAb;AACD,GAbD,EAaE,EAbF,EAPuB,CAsBvB;;AACA,WAASC,SAAT,CAAmBC,SAAnB,EAAiD;AAC/C,QAAGA,SAAH,EAAa;AACX,UAAG,CAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,IAAX,MAAkB,OAArB,EAA8BV,MAAM,CAACW,IAAP,CAAYF,SAAZ,EAA9B,KACK,IAAG,CAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,IAAX,MAAkB,QAAlB,IAA4BD,SAA5B,aAA4BA,SAA5B,eAA4BA,SAAS,CAAEG,QAA1C,EACHH,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEG,QAAX,CAAoBC,GAApB,CAAyBC,EAAD,IAAO;AAC7B,YAAGA,EAAE,CAACJ,IAAH,KAAU,OAAb,EAAsB;AACpBV,UAAAA,MAAM,CAACW,IAAP,CAAYG,EAAZ;AACD,SAFD,MAGK,IAAGA,EAAE,CAACJ,IAAH,KAAU,QAAV,IAAqBI,EAAE,CAACF,QAA3B,EAAqCJ,SAAS,CAACM,EAAD,CAAT;;AAC1C,eAAOd,MAAP;AACD,OAND;AAOH;;AACD,WAAOA,MAAP;AACD;;AAED,MAAGN,MAAH,EAAWc,SAAS,CAACd,MAAD,CAAT;;AAIX,WAASqB,OAAT,CAAiBC,GAAjB,EAAiC;AAC/BlB,IAAAA,OAAO,CAACkB,GAAD,CAAP,CAD+B,CAE/B;AACA;;AAEF,sBACE,QAAC,MAAD;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CAQE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxCF;AA0CD,CAzFM;;GAAMvB,G;;KAAAA,G","sourcesContent":["import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport React from 'react';\n\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { Block,getBlocks } from './blocks';\n\nimport { Header } from './components/Header/Header';\nimport { ImageGrid } from './components/ImageGrid/ImageGrid';\nimport { InfoPanel } from './components/InfoPanel/InfoPanel';\nimport ErrorBoundary from './util/ErrorBoundary'\n\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\n\nexport const App = () => {\n  const [blocks, setBlocks] = React.useState<Block | null>(null);\n  const [info, setInfo] = React.useState<Block|undefined>(undefined);\n  \n  let imgarr:Block[] = [];\n \n  //Load the blocks \n  React.useEffect(()=>{\n    let abortController: AbortController = new AbortController();\n    let aborted = abortController.signal.aborted;\n\n    (async ()=>{\n      const resp = await getBlocks();\n      aborted = abortController.signal.aborted;\n      if (aborted === false) {\n        setBlocks(resp);\n      }\n    })();\n\n    return () => abortController.abort();\n  },[])\n \n  //Iterate the blocks and put the blocks of type Image into an array and return the array\n  function SelectImg(rootblock:Block|null): Block[]{\n    if(rootblock){\n      if(rootblock?.type==='Image') imgarr.push(rootblock);      \n      else if(rootblock?.type==='Column'&&rootblock?.children) \n        rootblock?.children.map((el)=> {\n          if(el.type==='Image') {\n            imgarr.push(el);\n          }\n          else if(el.type==='Column'&& el.children) SelectImg(el);\n          return imgarr;\n        })\n    }\n    return imgarr;\n  }\n  \n  if(blocks) SelectImg(blocks);\n\n  \n\n  function onClick(img:Block): void{\n    setInfo(img);\n    //console.log('imgid:',img.id);\n   }\n  \n  return (\n    <Router>\n      <Header />\n      <main>\n        <ImageGrid />\n        <InfoPanel />\n      </main>\n    </Router>\n    // <Router>\n    //   <Header />\n    //   <main>\n    //     <Box sx={{ flexGrow: 1, mr:60,p:2}}>\n    //     {!blocks? <div><h1>Loading...wait for the response</h1></div>:\n    //     <ErrorBoundary>\n    //       <Grid container spacing={{ xs: 3, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n    //        <Routes>                 \n    //         <Route  path=\"/:imgid\"  element= {\n    //             imgarr ?\n    //              imgarr.map((img,index)=>\n    //               <Grid item xs={2} sm={4} md={4} key={index} >\n    //                   <ErrorBoundary><ImageGridO data={img} info={info} onClick={()=>onClick(img)}/></ErrorBoundary>\n    //               </Grid>\n    //               )\n    //               :<Grid item>No image</Grid>\n    //         } /> \n    //        <Route  path=\"*\"  element= {\n    //             imgarr ?\n    //              imgarr.map((img,index)=>\n    //               <Grid item xs={2} sm={4} md={4} key={index} >\n    //                   <ErrorBoundary><ImageGridO data={img} info={info} onClick={()=>onClick(img)}/></ErrorBoundary>\n    //               </Grid>\n    //               ):<Grid item>No image</Grid>\n    //         } /> \n    //         </Routes>\n    //       </Grid>\n    //       </ErrorBoundary>\n    //       }\n    //     </Box>\n    //     <InfoPanel id={info?.id} description={info?.data?.description.toString()} dimensions={info?.data?.width.toString()+\" x \"+info?.data?.height.toString()} createdAt={info?.data?.createdAt.toString()}/>\n    //   </main>\n    // </Router>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}